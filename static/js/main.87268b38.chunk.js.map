{"version":3,"sources":["ui/components/superInput/SuperInputText.module.css","ui/components/superButton/SuperButton.module.css","ui/components/superCheckbox/SuperCheckbox.module.css","ui/login/Login.tsx","ui/registration/Regist.tsx","ui/profile/Profile.tsx","ui/registration/password/PasswordRecovery.tsx","ui/registration/password/PasswordNew.tsx","ui/components/superInput/SuperInput.tsx","ui/components/superButton/SuperButton.tsx","ui/components/superCheckbox/SuperCheckbox.tsx","ui/components/SuperComponents.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Login","Regist","Profile","PasswordRecovery","PasswordNew","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","console","log","e","currentTarget","value","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperComponents","SuperInput","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,WAAa,mCAAmC,WAAa,mCAAmC,MAAQ,gC,iBCA1HD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,gBCA/DD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,cAAgB,uC,uICChEC,EAAQ,WACnB,OAAO,yCCDIC,EAAS,WACpB,OAAO,0CCDIC,EAAU,WACrB,OAAO,2CCDIC,EAAmB,WAC9B,OAAO,oDCDIC,EAAc,WACzB,OAAO,+C,8BCuDMC,EA3C2C,SAAC,GAUtD,EARCC,KAQA,IAPAC,EAOD,EAPCA,SAAUC,EAOX,EAPWA,aACVC,EAMD,EANCA,WAAYC,EAMb,EANaA,QACZC,EAKD,EALCA,MACAC,EAID,EAJCA,UAAWC,EAIZ,EAJYA,cAERC,EAEJ,6GAeGC,EAAkB,UAAMC,IAAEL,MAAR,YAAiBE,GAAgC,IACnEI,EAAmB,UAAMD,IAAEE,MAAR,YAAiBP,EAAQK,IAAEG,WAAaH,IAAEI,WAA1C,YAAwDR,GAEjF,OADAS,QAAQC,IAAIL,GAER,qCACE,mCACIX,KAAM,OACNC,SArBe,SAACgB,GACxBhB,GACGA,EAASgB,GAEZf,GAAgBA,EAAae,EAAEC,cAAcC,QAkBrChB,WAhBiB,SAACc,GAC1Bd,GAAcA,EAAWc,GAEzBb,GACa,UAAVa,EAAEG,KACFhB,KAYKE,UAAWK,GAEPH,IAEPH,GAAS,sBAAMC,UAAWG,EAAjB,SAAsCJ,Q,gBC3BzCgB,EAhBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAKhB,EAGR,EAHQA,UACFE,EAEN,mCACKe,EAAc,UAAMD,EAAMZ,IAAEY,IAAMZ,IAAEc,QAAtB,YAAiClB,GAErD,OACI,oCACIA,UAAWiB,GACPf,K,gBCqBDiB,EA/ByC,SAAC,GASpD,EAPGzB,KAOF,IANEC,EAMH,EANGA,SAAUyB,EAMb,EANaA,gBACVpB,EAKH,EALGA,UACAqB,GAIH,EALcpB,cAKd,EAJGoB,UAEGnB,EAEN,4FAMKG,EAAmB,UAAMD,IAAEkB,SAAR,YAAoBtB,GAAwB,IAErE,OACI,kCACI,mCACIN,KAAM,WACNC,SAXa,SAACgB,GACtBhB,GAAYA,EAASgB,GACrBS,GAAmBA,EAAgBT,EAAEC,cAAcW,UAU3CvB,UAAWK,GAEPH,IAEPmB,GAAY,sBAAMrB,UAAWI,IAAEH,cAAnB,SAAmCoB,QChC/CG,EAAkB,WAC7B,OAAO,gCACL,cAACC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCYWC,MAZf,WACI,OAAQ,gCACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCFGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87268b38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2u2Ai\",\"errorInput\":\"SuperInputText_errorInput__2WRMR\",\"error\":\"SuperInputText_error__12cjQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1z8lY\",\"red\":\"SuperButton_red__tdjI5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1fzoF\",\"spanClassName\":\"SuperCheckbox_spanClassName__2yGPG\"};","import React from \"react\";\r\n\r\nexport const Login = () => {\r\n  return <div>\r\n      Login\r\n  </div>\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Regist = () => {\r\n  return <div>\r\n      Regist\r\n  </div>\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Profile = () => {\r\n  return <div>\r\n      Profile\r\n  </div>\r\n}\r\n","import React from \"react\";\r\n\r\nexport const PasswordRecovery = () => {\r\n  return <div>\r\n      PasswordRecovery\r\n  </div>\r\n}\r\n","import React from \"react\";\r\n\r\nexport const PasswordNew = () => {\r\n  return <div>\r\n      PasswordNew\r\n  </div>\r\n}\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void\r\n  onEnter?: () => void\r\n  error?: string\r\n  spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n      type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n      onChange, onChangeText,\r\n      onKeyPress, onEnter,\r\n      error,\r\n      className, spanClassName,\r\n\r\n      ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange // если есть пропс onChange\r\n    && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n    onChangeText && onChangeText(e.currentTarget.value)\r\n  }\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    onEnter // если есть пропс onEnter\r\n    && e.key === 'Enter' // и если нажата кнопка Enter\r\n    && onEnter() // то вызвать его\r\n  }\r\n\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n  const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}` // need to fix with (?:) and s.superInput\r\n  console.log(finalInputClassName)\r\n  return (\r\n      <>\r\n        <input\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            onKeyPress={onKeyPressCallback}\r\n            className={finalInputClassName}\r\n\r\n            {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n        />\r\n        {error && <span className={finalSpanClassName}>{error}</span>}\r\n      </>\r\n  )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)// сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React from \"react\";\r\nimport SuperInputText from \"./superInput/SuperInput\";\r\nimport SuperButton from \"./superButton/SuperButton\";\r\nimport SuperCheckbox from \"./superCheckbox/SuperCheckbox\";\r\n\r\nexport const SuperComponents = () => {\r\n  return <div>\r\n    <SuperInputText/>\r\n    <SuperButton/>\r\n    <SuperCheckbox/>\r\n  </div>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Login} from \"./ui/login/Login\";\nimport {Regist} from \"./ui/registration/Regist\";\nimport {Profile} from \"./ui/profile/Profile\";\nimport {PasswordRecovery} from \"./ui/registration/password/PasswordRecovery\";\nimport {PasswordNew} from \"./ui/registration/password/PasswordNew\";\nimport {SuperComponents} from \"./ui/components/SuperComponents\";\n\nfunction App() {\n    return (<div>\n            <Login/>\n            <Regist/>\n            <Profile/>\n            <PasswordRecovery/>\n            <PasswordNew/>\n            <SuperComponents/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}